name: 'Export marimo notebooks using marimushka'
description: 'Export of notebooks and apps'

inputs:
  template:
    description: 'The html.j2 template for export'
    required: false
  apps:
    description: 'The apps folder'
    required: false
    #default: 'apps'
  notebooks:
    description: 'The notebook folder'
    required: false
    #default: 'notebooks'

runs:
  using: "composite"
  steps:
    - name: 📦 Checkout repository
      uses: actions/checkout@v4

    - name: 🚀 Install uv
      uses: astral-sh/setup-uv@v6
      with:
        python-version: '3.12'
        cache-dependency-glob: '/dev/null'
        ignore-nothing-to-cache: 'true'

    - name: 🛠️ Export marimo notebooks to WebAssembly
      shell: bash
      run: |
        # Path to default template in this action's directory
        DEFAULT_TEMPLATE="${GITHUB_ACTION_PATH}/templates/default.html.j2"

        # Use provided template if set, otherwise fallback
        if [ -z "${{ inputs.template }}" ]; then
          echo "No template provided. Using default: $DEFAULT_TEMPLATE"
          TEMPLATE="$DEFAULT_TEMPLATE"
        else
          echo "Using provided template: ${{ inputs.template }}"
          TEMPLATE="${{ inputs.template }}"
        fi

        # Create a random temporary directory
        TMP_DIR=$(mktemp -d)
        echo "Using temporary directory: $TMP_DIR"
        echo "Using as template: $TEMPLATE"

        uvx marimushka --help

        uvx marimushka --template="$TEMPLATE" \
                       --output ="$TMP_DIR" \
                       --apps="${{ inputs.apps }}" \
                       --notebooks="${{ inputs.notebooks }}"

        # Save the temp directory for the next step
        echo "TMP_DIR=$TMP_DIR" >> "$GITHUB_ENV"
        
        tree $TMP_DIR

    - name: check the output
      shell: bash
      run: |
        tree ${{ env.TMP_DIR }}

    - name: Upload HTML artifacts
      if: ${{ env.ACT != 'true' }}  # Skip if running with 'act'
      uses: actions/upload-artifact@v4
      with:
        name: marimo
        path: ${{ env.TMP_DIR }}
        retention-days: 1

    - name: 🧹 Clean up temporary folder
      shell: bash
      run: |
        if [ -d "${{ env.TMP_DIR }}" ]; then
          echo "Deleting temp dir: ${{ env.TMP_DIR }}"
          rm -rf "${{ env.TMP_DIR }}"
        else
          echo "Temp dir already gone or not set."
        fi
