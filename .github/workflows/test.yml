# Workflow for testing Marimo notebooks
# This workflow is designed to be called by other workflows to test Marimo notebooks
# It finds all Python files in a specified directory and runs them as Marimo notebooks

name: Marimo Notebook CI

on:
  # This workflow is designed to be called by other workflows
  workflow_call:
    inputs:
      # Directory containing Marimo notebooks to test
      notebook-dir:
        required: true
        type: string
    secrets: {}

jobs:
  # First job: Find all Python files in the specified directory
  list-notebooks:
    name: List Marimo Notebooks
    runs-on: ubuntu-latest
    # Output the list of notebooks for the next job to use
    outputs:
      notebooks: ${{ steps.set-notebooks.outputs.notebooks }}

    steps:
      # Check out the repository code
      - name: Checkout repo
        uses: actions/checkout@v5

      # Find all Python files and format them as a JSON array
      - name: List notebooks
        id: set-notebooks
        run: |
          cd "${{ inputs.notebook-dir }}"
          # Find all .py files and convert to JSON array using jq
          NOTEBOOKS=$(find . -type f -name '*.py' | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "notebooks=$NOTEBOOKS" >> $GITHUB_OUTPUT

  # Second job: Run each notebook found by the first job
  run-notebooks:
    name: Run ${{ matrix.notebook }}
    needs: list-notebooks
    runs-on: ubuntu-latest
    # Create a matrix to run each notebook in parallel
    strategy:
      # Continue running other notebooks if one fails
      fail-fast: false
      matrix:
        notebook: ${{ fromJson(needs.list-notebooks.outputs.notebooks) }}

    steps:
      # Check out the repository code
      - uses: actions/checkout@v5

      # Set up Python environment using uv
      - uses: astral-sh/setup-uv@v6
        with:
          python-version: 3.13

      # Run the notebook in sandbox mode, then terminate it after a short delay
      # This ensures the notebook can be executed without errors
      - name: Run notebook
        run: |
          uvx marimo run "${{ matrix.notebook }}" --sandbox --no-browser &
          pid=$!
          sleep 1
          kill $pid
        working-directory: ${{ inputs.notebook-dir }}
